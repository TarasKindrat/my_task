#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'master'
        }
    environment {
               //FILE = sh(script: 'mysql_$(date "+%Y-%m-%d-%H-%M-%S").sql.gz')
			FILE_START = 'mysql_'
			FILE_END = '.sql.gz'
			DATE_FILE = sh(script: 'date "+%Y-%m-%d-%H-%M-%S"', returnStdout: true).trim()
			FILE = "${FILE_START}${DATE_FILE}${FILE_END}"
	                FTP_HOST = '192.168.56.11'
	                FTP_DIRECTORY = 'mysql_backup'
		
               }
    triggers { pollSCM('0 18 * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
      stage("Get date and time") {
	
	        
           steps {
		 echo "Backup name is: "
                 echo "${FILE}"
		 
	   }
	}
        stage("Make backup") {
            steps {
		   withCredentials([usernamePassword(credentialsId: 'mysql_user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'), 
		   usernamePassword(credentialsId: 'mysql_host_db', usernameVariable: 'DBSERVER', passwordVariable: 'DATABASE')]) 
		    {
                      
		      sh """
		      #!/usr/bin/env bash
		      mysqldump --opt --protocol=TCP --user=${USERNAME} --password=${PASSWORD} --host=${DBSERVER} ${DATABASE} | /usr/bin/gzip > ${FILE}
		      """
		      sh 'ls -la'
            
                    }
	    }
        }
        stage("Upload to ftp") {
            steps {
		   
		   withCredentials([usernamePassword(credentialsId: 'ftp', usernameVariable: 'FTP_USERNAME', passwordVariable: 'FTP_PASSWORD')])
		     {
                       
			     sh 'ftp-upload -h ${FTP_HOST} -u ${FTP_USERNAME} --password ${FTP_PASSWORD} -d ${FTP_DIRECTORY} ${FILE}'
		       
                     }
                  }
          }
	    
			
	stage("Remove backup from Jenkins") {
            steps {
		echo "Before remov backup"
               sh """
		  #!/usr/bin/env bash
		  ls -la | grep mysql_
                rm ${FILE}
		echo "After remov backup"
		ls -la | grep mysql_
		pwd
		"""
            }
        }
	stage("Check file on FTP") {
            steps {
		   withCredentials([usernamePassword(credentialsId: 'ftp', usernameVariable: 'FTP_USERNAME', passwordVariable: 'FTP_PASSWORD')])
		     {
	    sh"""
	    #!/usr/bin/env bash
            lftp -p 21 -u ${FTP_USERNAME},${FTP_PASSWORD} ${FTP_HOST}/${FTP_DIRECTORY} <<EOF
            ls -lat
           QUIT
           EOF
	   """
	    }
	}
     }      
    }
    
 }
 
