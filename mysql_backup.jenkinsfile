#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent { 
        label 'master'
        }
    triggers { pollSCM('0 18 * * *') }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
      stage("Get date and time") {
	
	        environment {
               //FILE = sh(script: 'mysql_$(date "+%Y-%m-%d-%H-%M-%S").sql.gz')
			FILE_START = 'mysql_'
			FILE_END = '.sql.gz'
			DATE_FILE = sh(script: 'date "+%Y-%m-%d-%H-%M-%S"', returnStdout: true).trim()
			FILE = "${FILE_START}${DATE_FILE}${FILE_END}"
               }
           steps {
		 echo "Backup name is: "
                 echo "${env.FILE}"
	   }
	}
        stage("Make backup") {
            steps {
		   withCredentials([usernamePassword(credentialsId: 'mysql_user', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'), 
		   usernamePassword(credentialsId: 'mysql_host_db', usernameVariable: 'DBSERVER', passwordVariable: 'DATABASE')]) 
		    {
                     
                      //sh 'mysqldump --opt --protocol=TCP --user=${USERNAME} --password=${PASSWORD} --host=${DBSERVER} ${DATABASE} |  /usr/bin/gzip > ${env.FILE}'
		      sh '''
		      #!/bin/bash
		      mysqldump --opt --protocol=TCP --user=${USERNAME} --password=${PASSWORD} --host=${DBSERVER} ${DATABASE} | /usr/bin/gzip > .${env.FILE}
		      '''
		      sh 'ls -la'
            
                    }
	    }
        }
        stage("Upload to ftp") {
            steps {
		   withCredentials([usernamePassword(credentialsId: 'ftp', usernameVariable: 'FTP_USERNAME', passwordVariable: 'FTP_PASSWORD')])
		     {
                       //sh 'ftp-upload -h {192.168.56.11} -u ${FTP_USERNAME} --password ${FTP_PASSWORD} -d {'mysql_backup'} ${env.FILE}'
		       sh 'ftp-upload -h {192.168.56.11} -u ${FTP_USERNAME} --password ${FTP_PASSWORD} -d {"mysql_backup"} ${FILE}'
		       
                     }
                  }
          }
		
	stage("Remove backup from Jenkins") {
            steps {
                
                 sh 'rm ${env.FILE}'
            }
        }
               
    }
    
 }
 
